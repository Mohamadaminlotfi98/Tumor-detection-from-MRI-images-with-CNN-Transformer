class CNNTransformer(nn.Module):
    def __init__(self):
        super(CNNTransformer, self).__init__()

        # CNN encoder
        self.cnn_encoder = nn.Sequential(
            nn.Conv2d(3, 64, 5),
            nn.BatchNorm2d(64),
            nn.ReLU(),
            nn.MaxPool2d(5, 5),

            nn.Conv2d(64, 128, 5),
            nn.BatchNorm2d(128),
            nn.ReLU(),
            nn.MaxPool2d(4, 4),

            nn.Conv2d(128, 256, 5),
            nn.BatchNorm2d(256),
            nn.ReLU(),
            nn.MaxPool2d(4,4),
        )

        # # Transformer encoder
        self.transformer_encoder = nn.TransformerEncoder(
            encoder_layer=nn.TransformerEncoderLayer(
                d_model=256,
                nhead=8,
                dim_feedforward=128,
                dropout=0.1,
                batch_first=False,
            ),
            num_layers=2,
        )

        # Output layer
        self.output = nn.Linear(256, 3)

    def forward(self, images):
        # CNN encoder
        cnn_features = self.cnn_encoder(images)

        # Flatten CNN features
        cnn_features = cnn_features.view(-1, 256)

        # Transformer encoder
        transformer_features = self.transformer_encoder(cnn_features)

        # Output layer
        logits = self.output(transformer_features)

        return logits

# Create the CNN-Transformer network
model = CNNTransformer()
